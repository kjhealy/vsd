---
title: "Final Project"
author: "<PUT YOUR NAME HERE>"
date: "`r Sys.Date()`"
format: html
---

```{r}
#| label = "load-libraries-data",
#| warning = FALSE,
#| message = FALSE
library(tidyverse)
library(here)
library(socviz)

## Mapping
library(sf)

## Install nycdogs (you should have this already, but if you don't, 
## uncomment and run the line below once)
# remotes::install_github("kjhealy/nycdogs)

## Census
## Make sure you have a census API key! You only need one.
## https://api.census.gov/data/key_signup.html
library(tidycensus)
options(tigris_use_cache = TRUE)

## Activate your API key by uncommenting the next line and 
## putting your key in the quotes
# census_api_key("YOUR_API_KEY_HERE")

## Optionally install this package
## remotes::install_github("kjhealy/nycomplaints")
## library(nycomplaints)
## But the datasets are also included in the project here.

```

# The dataset

The dataset is documented here: <https://kjhealy.github.io/nycomplaints/reference/nycomplaints.html>. The source is documented here: <https://data.cityofnewyork.us/City-Government/NYC-Council-Constituent-Services/b9km-gdpy/about_data>

Note that the specific data provided for the project is older than the current version on NYC's website. 

Read the documentation before working with the data.

# Set up the project

First, load the data objects in the local `data/` folder:

```{r}
load(here("data", "nycomplaints.rda"))
load(here("data", "nyzip_demog.rda"))
```

## The complaints data:

```{r}
nycomplaints
```


## Zipcode demographics

Population counts (overall, and by race and ethnicity) and median household income for the Zip codes:

```{r}
nyzip_demog
```

## Some additional useful tables

Here I provide some tables that might be useful when analyzing the data.

```{r}
## Some American Community Survey variables from the Census Bureay: 
## official names and short names
acs_vars <- tribble(
      ~varname, ~clean_name,
      "B01003_001", "pop",
      "B01001B_001", "black",
      "B01001A_001", "white",
      "B01001H_001", "nh_white",
      "B01001I_001", "hispanic",
      "B01001D_001", "asian",
      "B19013_001", "median_hh_inc")

acs_vars

## NYC Counties in the Census/ACS = NYC Boroughs in the complaints data 
ny_county_boros <- tribble(
  ~county, ~borough,
  "New York County, New York", "Manhattan",
  "Queens County, New York", "Queens",
  "Kings County, New York", "Brooklyn",
  "Bronx County, New York", "Bronx",
  "Richmond County, New York", "Staten Island"
)

ny_county_boros
```

## Map base layers

```{r}
## Zip Basemap from nycdogs
zip_base <- nycdogs::nyc_zips |> 
  rename(zip = zip_code) |> 
  mutate(zip = as.character(zip))

## ZCTA - Zip Code Tabulation Area - data for New York State, 
## including Geometry (i.e. map data).
zip_data <- get_acs(geography = "zcta", 
        variables = acs_vars$varname, 
        state = "NY", 
        year = 2019,
        county = NULL, 
        geometry = TRUE) |> 
  rename(zip = GEOID) |> 
  select(-moe) |> 
  tibble::as_tibble() |> 
  pivot_wider(names_from = variable, 
              values_from = c(estimate)) |> 
  rename_with(~ acs_vars$clean_name, 
              all_of(acs_vars$varname)) |> 
  sf::st_as_sf() |> 
  relocate(geometry, .after = everything()) |> 
  filter(zip %in% zip_base$zip) 

zip_data
```


Quick blank map:

```{r}
zip_data |> 
  ggplot() +
  geom_sf()
```

## County- (i.e. Borough-) level data

```{r}
## Data for the 5 NYC Boroughs, with Borough names patched in
county_data <- get_acs(geography = "county", 
        variables = acs_vars$varname, 
        state = "NY", 
        geometry = TRUE) |> 
  rename(fips = GEOID, 
         county = NAME) |> 
  select(-moe) |> 
  tibble::as_tibble() |> 
  pivot_wider(names_from = variable, 
              values_from = c(estimate)) |> 
  rename_with(~ acs_vars$clean_name, 
              all_of(acs_vars$varname)) |> 
  filter(county %in% ny_county_boros$county) |> 
  left_join(ny_county_boros, by = "county") |> 
  select(fips, county, borough, everything()) |> 
  sf::st_as_sf() |> 
  relocate(geometry, .after = everything())


county_data
```

## Additional variables

```{r}
## Table of all 2019 ACS variables:
acs_vars <- load_variables(year = 2019, dataset = "acs5")
```


## Other information

_Hint:_ You can use `st_drop_geometry()` to change a spatial table into a simple tibble:

```{r}
## See how the `geometry` column disappears
zip_data |> 
  st_drop_geometry()
```


# Questions

## 1. Briefly Describe the Dataset 

- Write a paragraph summarizing what the data is, saying what the unit of observation is, what each column represents, and any other remarks you might have. 

## 2 Look at each column/variable in a little more detail 

- Explore the basic structure of the data, by e.g. writing code to summarize the variables or investigate aspects of them that seem interesting. You can also create some initial rough exploratory plots if you like, in addition to tables or other summaries. As you go, explain here what it is you are doing and why.

## 3. Explore in more depth: make at least three plots or maps 

- Following on from the exploratory work, make at least three plots that you think show something interesting about the data. Make sure they look presentable and effective to you. Show your work (i.e. the code you write). Provide a motivation for and brief discussion of each plot. You can merge in external data if you like (e.g. from the Census), but it's not required. 


## 4. Make one properly-polished plot or map. 

- a. _Either_ choose one of the plots you've already made _or_ create a new plot or map using the data. Work it up to something more finished. Aim for something that is both properly informative and as polished as you can make it. Use what you know about `scale_` and `theme()` functions (as well as pre-made themes, if you like) to do this. 

- b. Save this plot or map using `ggsave()`. Create it as a PNG or PDF file. Make its dimensions (width and height) the right size for a printable poster. 

## 5. Short final discussion: Scope and limits of this data

- Say what you think the limits of the dataset are, or the limits of the plots you've made, and e.g. what sort of data you'd need to make it better or more informative.

