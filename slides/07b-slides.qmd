---
title: "07b --- Working with the Census"
format: kjhslides-revealjs
engine: knitr
filters:
  - invert-h1
  - line-highlight
  - include-code-files
author:
  - name: Kieran Healy
date: last-modified
editor_options: 
  chunk_output_type: console
---

```{r}
#| label = "packages",
#| include = FALSE
library(flipbookr)
library(here)
library(tidyverse)
library(kjhslides)
```


```{r}
#| label = "setup",
#| include = FALSE

kjh_register_tenso()
kjh_set_knitr_opts()
kjh_set_slide_theme()







# Safe
```



# [Working with<br />]{.fg-yellow} [`tidycensus`]{.fg-lblue} 

## Load our libraries


```{r}
#| label = "05-work-with-dplyr-and-geoms-1",
#| message = TRUE
library(here)       # manage file paths
library(socviz)     # data and some useful things, especially %nin%
library(tidyverse)  # your friend and mine

library(scales)     # Convenient scale labels
library(tidycensus) # Tidily talk to the Census
library(sf)         # Draw maps with ggplot

# Don't needlessly download geo files multiple times
options(tigris_use_cache = TRUE)


```

## Census Data

- Make sure you have a Census API key. Load it after you load `tidycensus` 

```r
library(tidycensus)

census_api_key("1234567890987654321")
```

- Get one from <https://api.census.gov/data/key_signup.html>


## Decennial Census Variables

There are a _lot_ of them:

```{r}
census_vars <- load_variables(year = 2010,
                              dataset = "sf1",
                              cache = TRUE)

census_vars
```

## Decennial Census Variables

- Median Age by State

```{r}
age10 <- get_decennial(geography = "state",
                       variables = "P013001",
                       year = 2010)

age10
```


## Some County Data for North Carolina

```{r}
# Census variable names
popvars <- c("P005003", "P005004", "P005006", "P004003")


# Get a county-level dataset for NC with these variables
# The summary value is the total population.
nc <- get_decennial(geography = "county",
                    variables = popvars,
                    year = 2010,
                    summary_var = "P001001",
                    state = "NC") |>
  mutate(pct = 100 * (value / summary_value))

nc
```


## We can do this a little more elegantly

```{r}
# Census variable names
popvars <- tribble(
  ~variable, ~name, 
  "P005003", "nh_white",  
  "P005004", "nh_black",
  "P005006", "nh_asian",
  "P004003", "hispanic")

popvars
```

## We can do this a little more elegantly

```{r}
# Get a county-level dataset for NC with these variables
# The summary value is the total population.
nc <- get_decennial(geography = "county",
                    variables = popvars$variable, #<<
                    year = 2010,
                    summary_var = "P001001",
                    state = "NC") |>
  mutate(pct = 100 * (value / summary_value))

nc
```

## We can do this a little more elegantly

```{r}
nc |>  
  left_join(popvars, by = "variable") |> 
  relocate(name, .after = variable) |>  
  select(-variable) |>  
  pivot_wider(names_from = name, 
              names_glue = "{name}_{.value}",
              values_from = c(value, pct)) |>  
  mutate(NAME = str_remove(NAME, " County.*"))
```


```{r}
#| label = "reveal-nccensus-obj",
#| eval = TRUE,
#| include = FALSE
nc_wide <- nc |> 
  left_join(popvars, by = "variable") |> 
  relocate(name, .after = variable) |> 
  select(-variable) |> 
  pivot_wider(names_from = name, 
              names_glue = "{name}_{.value}",
              values_from = c(value, pct)) |> 
  mutate(NAME = str_remove(NAME, " County.*"))
```


## Widened table

Assign this to `nc_wide` and we have this:

```{r}
nc_wide
```

## Top 20 Counties by Percent Hispanic

:::: {.columns}
::: {.column width="45%"}
```{r}
#| label = "codefig-hispanicplot",
#| message = FALSE,
#| fig.show = "hide",
#| fig.width = 4.8,
#| fig.height = 5
nc_wide |>
  slice_max(order_by = hispanic_pct, n = 20) |> 
  ggplot(mapping = aes(x = hispanic_pct,
                       y = reorder(NAME, hispanic_pct))) + 
  geom_point() + 
  labs(x = "Percent Hispanic", 
       y = NULL, 
       title = "North Carolina Counties")

```

:::

::: {.column width="55%" .right}
```{r}
#| echo = FALSE
  knitr::include_graphics(
  knitr::fig_chunk("codefig-hispanicplot", "png"))
```

:::
::::

## Log population vs Percent Hispanic

:::: {.columns}
::: {.column width="45%"}
```{r}
#| label = "codefig-hispvpop",
#| message = FALSE,
#| fig.show = "hide",
#| fig.width = 4.8,
#| fig.height = 4.5
nc_wide |>
  ggplot(mapping = aes(x = summary_value,
                       y = hispanic_pct)) + 
  geom_point() + 
  scale_x_log10(labels = label_number(scale_cut = cut_short_scale())) + 
  labs(x = "Log Population", 
       y = "Percent Hispanic", 
       title = "North Carolina Counties")

```

:::

::: {.column width="55%" .right}
```{r}
#| echo = FALSE
  knitr::include_graphics(
  knitr::fig_chunk("codefig-hispvpop", "png"))
```

:::
::::

## Log population vs Percent Black

:::: {.columns}
::: {.column width="45%"}
```{r}
#| label = "codefig-blackvpop",
#| message = FALSE,
#| fig.show = "hide",
#| fig.width = 4.8,
#| fig.height = 4.5
nc_wide |>
  ggplot(mapping = aes(x = summary_value,
                       y = nh_black_pct)) + 
  geom_point() + 
  scale_x_log10(labels = label_number(scale_cut = cut_short_scale())) + 
  labs(x = "Log Population", 
       y = "Percent Black", 
       title = "North Carolina Counties")

```

:::

::: {.column width="55%" .right}

```{r}
#| echo = FALSE
  knitr::include_graphics(
  knitr::fig_chunk("codefig-blackvpop", "png"))
```

:::
::::

## Percent White vs Percent Black

:::: {.columns}
::: {.column width="45%"}
```{r}
#| label = "codefig-blackvwhite",
#| message = FALSE,
#| fig.show = "hide",
#| fig.width = 4.8,
#| fig.height = 4.5
nc_wide |>
  ggplot(mapping = aes(x = nh_white_pct,
                       y = nh_black_pct)) + 
  geom_point() + 
  labs(x = "Percent White", 
       y = "Percent Black", 
       title = "North Carolina Counties")

```

:::

::: {.column width="55%" .right}
```{r}
#| echo = FALSE
  knitr::include_graphics(
  knitr::fig_chunk("codefig-blackvwhite", "png"))
```

:::
::::

## Population Pyramids

We can ask the Census for its estimates of the age breakdown of the population, using the `get_estimates()` function. 

```{r}
usa <- get_estimates(
    geography = "us",
    product = "characteristics",
    breakdown = c("SEX", "AGEGROUP"), 
    breakdown_labels = TRUE,
    year = 2019
  )

usa
```

## Population Pyramids

```{r}
# For the %nin% operator make sure you have 
# library(socviz) above
usa_pyr <- usa |> 
  filter(AGEGROUP %nin% "All ages", 
         str_detect(AGEGROUP, "Age"),
         SEX %nin% "Both sexes") |> 
  mutate(value = ifelse(SEX == "Male", -value, value))

usa_pyr
```


## Population Pyramids

:::: {.columns}
::: {.column width="45%"}
```{r}
#| label = "codefig-usapyrbasic",
#| message = FALSE,
#| fig.show = "hide",
#| fig.width = 6,
#| fig.height = 5.5
usa_pyr |> 
  ggplot(mapping = aes(x = value, 
                       y = AGEGROUP, 
                       fill = SEX)) + 
  geom_col(width = 0.95, alpha = 0.75) +
  labs(x = "Count", 
       y = NULL, 
       title= "US Population Pyramid") 
```

:::

::: {.column width="55%" .right}
```{r}
#| echo = FALSE
  knitr::include_graphics(
  knitr::fig_chunk("codefig-usapyrbasic", "png"))
```

:::
::::


## Population Pyramids

:::: {.columns}
::: {.column width="45%"}
```{r}
#| label = "codefig-usapyr",
#| message = FALSE,
#| fig.show = "hide",
#| fig.width = 6,
#| fig.height = 5.5
usa_pyr |> 
  ggplot(mapping = aes(x = value, 
                       y = AGEGROUP, 
                       fill = SEX)) + 
  geom_col(width = 0.95, alpha = 0.75) +
  # In the two scale functions we use \(x) label_number() 
  # and \(x) str_remove_all() as anonymous functions. Slightly 
  # more advanced usage than normal ...
  scale_x_continuous(
    labels = \(x) label_number(scale = 0.001, suffix = "k")(abs(x))) + 
  scale_y_discrete(
    labels = \(x) str_remove_all(x, "Age | years")) + 
  labs(x = "Count", 
       y = NULL, 
       title= "US Population Pyramid") + 
  theme(legend.position = "bottom")
```

:::

::: {.column width="55%" .right}
```{r}
#| echo = FALSE
  knitr::include_graphics(
  knitr::fig_chunk("codefig-usapyr", "png"))
```

:::
::::
