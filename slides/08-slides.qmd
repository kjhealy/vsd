---
title: "08 --- Change over Time"
format: kjhslides-revealjs
engine: knitr
filters:
  - invert-h1
  - line-highlight
  - include-code-files
author:
  - name: Kieran Healy
date: last-modified
editor_options: 
  chunk_output_type: console
---

```{r}
#| label = "packages",
#| include = FALSE
library(flipbookr)
library(here)
library(tidyverse)
library(kjhslides)
library(lubridate)
```


```{r}
#| label = "setup",
#| include = FALSE

kjh_register_tenso()
kjh_set_knitr_opts()
kjh_set_slide_theme()

xaringanExtra::use_panelset()





# Safe
```



# [Change over<br />]{.fg-yellow} [Time]{.fg-lblue} 


## Load our libraries


```{r}
#| label = "05-work-with-dplyr-and-geoms-1",
#| message = FALSE
library(here)       # manage file paths
library(socviz)     # data and some useful things, especially %nin%
library(tidyverse)  # your friend and mine

library(scales)     # Convenient scale labels

## New packages
# install.packages("tsibble") # Time series objects
# install.packages("feasts")  # Time series feature analysis 
# install.packages("slider")  # Moving averages and related methods
# remotes::install_github("kjhealy/demog") # Some US demographic data

library(tsibble)
library(feasts)
library(slider)
library(demog)

```

## A Time Series: [US Monthly Births]{.fg-yellow}

```{r}
boom <- okboomer |> 
  filter(country == "United States") |> 
  select(date, total_pop, births_pct_day) |> 
  rename(births = births_pct_day) 

boom
```

Here the `births` column means "Average daily births per million population"

## Looking at the Series

```{r}
#| label = "panel-chunk-boom",
#| fig.show = "hide",
#| fig.width = 16,
#| fig.height = 4
boom |> 
  ggplot(mapping = aes(x = date, 
                       y = births)) + 
  geom_line()
```

```{r}
#| echo = FALSE
knitr::include_graphics(
  knitr::fig_chunk("panel-chunk-boom", "png")
)
```

## Looking at the Series

```{r}
#| label = "panel-chunk-boom-2",
#| fig.show = "hide",
#| fig.width = 16,
#| fig.height = 4
boom |> 
  ggplot(mapping = aes(x = date, 
                       y = births)) + 
  geom_line() + 
  geom_smooth()
```

```{r}
#| echo = FALSE
knitr::include_graphics(
  knitr::fig_chunk("panel-chunk-boom-2", "png")
)
```

Too much smoothing here

## Time Series Decomposition

- The analysis of Time Series is a big area; people often want to see into the future
- We will focus on a couple of elementary methods that are more purely descriptive, particularly the idea of _decomposing_ a time series into its _trend_, _seasonal_, and _remainder_ components.
- Decomposition methods are descriptive rather than predictive. They also make assumptions about the character of the data (e.g. its seasonality) which might be something we want to investigate. 
- More complex forecasting methods are either more detailed, or attempt to be proper models, or both.

## Centered Moving Averages: [`slider`]{.fg-yellow}

```{r}
#| label = "ma-boom"
boom |> 
  mutate(
    ma3 = slide_dbl(births, mean,
                    .before = 1, .after = 1, 
                    .complete = TRUE)) 
```

## Centered Moving Averages: [`slider`]{.fg-yellow}


```{r}
#| label = "ma-boom-ma3",
#| fig.show = "hide",
#| fig.width = 16,
#| fig.height = 4
boom |> 
  mutate(
    ma3 = slide_dbl(births, mean,
                    .before = 1, .after = 1, 
                    .complete = TRUE)) |> 
  ggplot(aes(x = date, y = births)) + 
  geom_line() + 
  geom_line(aes(x = date, y = ma3), linewidth = rel(1.2), color = "firebrick") + 
  labs(title = "MA Order 3 (1 month either side)")
```

```{r}
#| echo = FALSE
knitr::include_graphics(
  knitr::fig_chunk("ma-boom-ma3", "png")
)
```

## A Centered Moving Average, order 5

```{r}
#| label = "ma-boom-1",
#| fig.show = "hide",
#| fig.width = 16,
#| fig.height = 4
boom |> 
  mutate(
    mav = slide_dbl(births, mean,
                    .before = 2, .after = 2, 
                    .complete = TRUE)) |> 
  ggplot() + 
  geom_line(aes(x = date, y = births)) + 
  geom_line(aes(x = date, y = mav), linewidth = rel(1.2), color = "firebrick") + 
  labs(title = "MA Order 5 (two months either side)")
```

```{r}
#| echo = FALSE
knitr::include_graphics(
  knitr::fig_chunk("ma-boom-1", "png")
)
```

## A Centered Moving Average, order 7

```{r}
#| label = "ma-boom-7",
#| fig.show = "hide",
#| fig.width = 16,
#| fig.height = 4
boom |> 
  mutate(
    mav = slide_dbl(births, mean,
                    .before = 3, .after = 3, 
                    .complete = TRUE)) |> 
  ggplot() + 
  geom_line(aes(x = date, y = births)) + 
  geom_line(aes(x = date, y = mav), linewidth = rel(1.2), color = "firebrick") + 
  labs(title = "MA Order 7 (three months either side)")
```

```{r}
#| echo = FALSE
knitr::include_graphics(
  knitr::fig_chunk("ma-boom-7", "png")
)
```

As the order goes up, the window for the average widens, and the line gets smoother and smoother.

## Odd vs Even Centered Moving Averages

- Even orders have to be calculated differently!
- When the period $m$ is odd, the average $d$ for an observation $y$ at a particular time $t$ is: 

\begin{equation}
d_t = \frac{1}{m}\sum_{i=-(m-1)/2}^{(m-1)/2} y_{t+i}
\end{equation}


## Odd vs Even Centered Moving Averages

- When the period is even, it's:

\begin{equation}
d_t = \frac{1}{m}\left(\frac{1}{2}\left(y_{t+(m-1)/2}+y_{t-(m-1)/2}\right) + \sum_{i=-(m-2)/2}^{(m-2)/2} y_{t+i}\right)
\end{equation}

This just means e.g. we use half of December of the previous year and half of December of the current year to calculate the centred moving average in June of the current year.


## A Centered Moving Average of order 12

We can calculate the CMA for even orders in two steps.

```{r}
#| label = "ma-boom-codeonly",
#| fig.show = "hide",
#| fig.width = 16,
#| fig.height = 4
boom |> 
  mutate(
    mav12 = slide_dbl(births, mean,
                    .before = 5, .after = 6, 
                    .complete = TRUE), 
    mav2x12 = slide_dbl(mav12, mean, 
                         .before = 1, .after = 0, 
                         .complete = TRUE)) 
```

See how we lose observations as our window widens.

## A Centered Moving Average, order 12

::: {.panel-tabset}

### Code

```{r}
#| label = "ma-boom-12",
#| fig.show = "hide",
#| fig.width = 16,
#| fig.height = 4
boom |> 
  mutate(
    mav12 = slide_dbl(births, mean,
                    .before = 5, .after = 6, 
                    .complete = TRUE), 
    mav2x12 = slide_dbl(mav12, mean, 
                         .before = 1, .after = 0, 
                         .complete = TRUE)) |> 
  ggplot() + 
  geom_line(aes(x = date, y = births)) + 
  geom_line(aes(x = date, y = mav2x12), linewidth = rel(1.2), color = "firebrick") + 
  labs(title = "12 month moving average")
```

::: aside
  Doing it this way---e.g. taking a yearly average of 12 monthly values---means all the seasonality is averaged away.
:::

### Plot

```{r}
#| echo = FALSE
knitr::include_graphics(
  knitr::fig_chunk("ma-boom-12", "png")
)
```

:::
 
## A 5 year CMA

::: {.panel-tabset}

### Code

```{r}
#| label = "ma-boom-60",
#| fig.show = "hide",
#| fig.width = 16,
#| fig.height = 4
boom |> 
  mutate(
    mav12 = slide_dbl(births, mean,
                    .before = 29, .after = 30, 
                    .complete = TRUE), 
    mav2x12 = slide_dbl(mav12, mean, 
                         .before = 1, .after = 0, 
                         .complete = TRUE)) |> 
  ggplot() + 
  geom_line(aes(x = date, y = births)) + 
  geom_line(aes(x = date, y = mav2x12), linewidth = rel(1.2), color = "firebrick") + 
  labs(title = "5 year moving average")
```

::: aside
  The wider the window, the flatter the line. And we continue to lose observations.
::: 


### Plot

```{r}
#| echo = FALSE
knitr::include_graphics(
  knitr::fig_chunk("ma-boom-60", "png")
)
```

:::

## [Seasonality]{.fg-green} in US Birth Rates


```{r}
#| label = "ma-boom-season-1",
#| fig.show = "hide",
#| fig.width = 16,
#| fig.height = 4
boom |> 
  filter(date > as.Date("1949-12-01"), 
         date < as.Date("1956-01-01")) |> 
  ggplot() + 
  geom_line(aes(x = date, y = births)) + 
  scale_x_date(date_breaks = "3 months", 
               date_labels = "%b")
```

```{r}
#| echo = FALSE
knitr::include_graphics(
  knitr::fig_chunk("ma-boom-season-1", "png")
)
```

## The Additive "Classical" Decomposition

- The Thing to be Decomposed: the births series, $y$ 
- A Trend Part: a centered moving average, $\hat{T}$ 
- A Seasonal Part: the "pulse" in the data,  $\hat{S}$
- A Remainder Part:  the leftover part, $\hat{R}$
- $y = \hat{T} + \hat{S} + \hat{R}$ 

## Calculate the [Trend]{.fg-yellow} part

- This is the moving average we just calculated.

```{r}
#| label = "ma-boom-trend",
#| fig.show = "hide",
#| fig.width = 16,
#| fig.height = 4
boom_t <- boom |> 
  select(date, births) |> 
  mutate(
    month = lubridate::month(date),
    mav12 = slide_dbl(births, mean, .before = 5, .after = 6, 
                    .complete = TRUE), 
    t = slide_dbl(mav12, mean, .before = 1, .after = 0, 
                         .complete = TRUE)) |> 
  select(-mav12) # Don't need this anymore
boom_t
  
```

## Calculate the [Seasonal]{.fg-yellow} part

- First "detrend" the series by subtracting `t` from `births`.

```{r}
#| fig.show = "hide",
#| fig.width = 16,
#| fig.height = 4
boom_t |> 
  mutate(detrended = births - t) 
  
```

## Calculate the [Seasonal]{.fg-yellow} part

- Then take the average by month.

```{r}
#| fig.show = "hide",
#| fig.width = 16,
#| fig.height = 4
boom_t |> 
  mutate(detrended = births - t, 
         month = lubridate::month(date)) |> 
  group_by(month) |> 
  summarize(seasonal = mean(detrended, na.rm = TRUE))
  
```

## Calculate the [Seasonal]{.fg-yellow} part

- Then "mean-center" each point by taking the average again and subtracting it from each observation. (This way the observations all sum to zero.)

```{r}
#| fig.show = "hide",
#| fig.width = 16,
#| fig.height = 4
boom_t |> 
  mutate(detrended = births - t) |> 
  group_by(month) |> 
  summarize(sm = mean(detrended, na.rm = TRUE)) |> 
  mutate(s = sm - mean(sm)) 
   
```

## Calculate the [Seasonal]{.fg-yellow} part

- Put this in an object
```{r}
#| fig.show = "hide",
#| fig.width = 16,
#| fig.height = 4
boom_s <- boom_t |> 
  mutate(detrended = births - t) |> 
  group_by(month) |> 
  summarize(sm = mean(detrended, na.rm = TRUE)) |> 
  mutate(s = sm - mean(sm)) |> 
  select(-sm) # don't need this anymore

boom_s
```

## Calculate the [Seasonal]{.fg-yellow} part

- Join it to the main table

```{r}
boom_ts <- boom_t |>  
  left_join(boom_s, by = "month") 

boom_ts
```


## Calculate the [Seasonal]{.fg-yellow} part

- In a "Classical" decomposition the Seasonal part just repeats. 

```{r}
#| label = "seasonal-rep",
#| fig.show = "hide",
#| fig.width = 16,
#| fig.height = 1.2
boom_ts |> 
  ggplot(aes(x = date, y = s)) + 
  geom_line()
```

```{r}
#| echo = FALSE
knitr::include_graphics(
  knitr::fig_chunk("seasonal-rep", "png")
)
```

## Calculate the [Remainder]{.fg-yellow} part

- The remainder is just what's left over from `y` (i.e., births) after we have calculated `t` and `s`. 

```{r}
boom_tsr <- boom_ts |> 
  mutate(r = births - t - s)

boom_tsr
```

## Decomposition: [`y = t + s + r`]{.fg-yellow} 
 
- This is an _additive_ decomposition. You can also do _multiplicative_ decompositions.
 
```{r}
boom_tsr |> 
  mutate(tsr = t + s + r)
```

## There's no need to it manually

```{r}
boom |> 
  mutate(date = yearmonth(date)) |> 
  as_tsibble(index = "date") |> 
  model(
    classical_decomposition(births, 
                            type = "additive")
  ) |>
  components() |> 
  select(-.model) 
```


## Plot all the components at once

::: {.panel-tabset}

### Code

```{r}
#| label = "autoplot-panel",
#| fig.show = "hide",
#| fig.width = 16,
#| fig.height = 6
boom |> 
  mutate(date = yearmonth(date)) |> 
  as_tsibble(index = "date") |> 
  model(
    classical_decomposition(births, type = "additive")
  ) |>
  components() |> 
  autoplot()
```

### Plot

```{r}
#| echo = FALSE
knitr::include_graphics(
  knitr::fig_chunk("autoplot-panel", "png")
)
```

:::

---

## The [STL]{.fg-green} Decomposition

- More robust and flexible than Classical Decomposition
- Due to William Cleveland
- Uses LOESS, a little like `geom_smooth()`
- Good for monthly and annual data
- Choose Trend and Seasonal Windows

## The [STL]{.fg-green} Decomposition

-Default seasonal monthly window is 13
 This works for monthly data
- Default monthly trend window is 21
- Can experiment with these
- They should be odd numbers

## The [STL]{.fg-green} Decomposition 

::: {.panel-tabset}

### Code

```{r}
#| label = "autoplot-stl-panel",
#| fig.show = "hide",
#| fig.width = 16,
#| fig.height = 6
boom |> 
  mutate(date = yearmonth(date)) |> 
  as_tsibble(index = "date") |> 
  model(
    STL(births ~ trend(window = 13) + 
          season(window = 7), 
        robust = TRUE)
  ) |>
  components() |> 
  autoplot()
```

### Plot

```{r}
#| echo = FALSE
knitr::include_graphics(
  knitr::fig_chunk("autoplot-stl-panel", "png")
)
```

:::

## Manually plotting the components

```{r}
bc <- boom |> 
  mutate(date = yearmonth(date)) |> 
  as_tsibble(index = "date") |> 
  model(
    # Experiment with a six-monthly trend window
    STL(births ~ trend(window = 7) + 
          season(window = 7), 
        robust = TRUE)
  ) |>
  components() |> 
  select(-.model)

bc
```

## Manually plotting the components

```{r}
#| label = "autoplot-stl-panel-2",
#| fig.show = "hide",
#| fig.width = 15,
#| fig.height = 9
bc |> 
  pivot_longer(cols = c(births, trend, season_year, remainder)) |> 
  mutate(
    date = as.Date(date),
    name = factor(name, levels = c("births", "trend", 
                                        "season_year", "remainder"), 
                  labels = c("Births", "Trend", "Seasonal", "Remainder"),
                       ordered = TRUE)) |> 
  ggplot() +
  geom_line(aes(date, value)) +
  scale_x_date(breaks = seq(as.Date("1935-01-01"), 
                                 as.Date("2015-01-01"), 
                                 by="10 years"),
               date_labels = "%Y") + 
  ggforce::facet_col(~ name, scales = 'free', space = 'free') + 
  labs(title = "Decomposition of US Monthly Births, 1933-2017", 
       subtitle = "Average number of daily births per million population each month", 
       x = "Time", y = "Birth rate")
  
```

---


```{r}
#| echo = FALSE,
#| fig.width = 15,
#| fig.height = 9
bc |> 
  pivot_longer(cols = c(births, trend, season_year, remainder)) |> 
  mutate(
    date = as.Date(date),
    name = factor(name, levels = c("births", "trend", 
                                        "season_year", "remainder"), 
                  labels = c("Births", "Trend", "Seasonal", "Remainder"),
                       ordered = TRUE)) |> 
  ggplot() +
  geom_line(aes(date, value)) +
  scale_x_date(breaks = seq(as.Date("1935-01-01"), 
                                 as.Date("2015-01-01"), 
                                 by="10 years"),
               date_labels = "%Y") + 
  ggforce::facet_col(~ name, scales = 'free', space = 'free') + 
  labs(title = "Decomposition of US Monthly Births, 1933-2017", 
       subtitle = "Average number of daily births per million population each month", 
       x = "Time", y = "Birth rate") + 
  theme(axis.text.y = element_text(size = rel(0.5)))

```

## Comparing seasonality

```{r}
s30s <- lubridate::interval(ymd(19330101), ymd(19390101))
s50s <- lubridate::interval(ymd(19530101), ymd(19590101))
s00s <- lubridate::interval(ymd(20030101), ymd(20090101))

my_intervs <- list(s30s, s50s, s00s)

bc_int <- bc |> 
  mutate(date = as.Date(date)) |> 
  filter(date %within% my_intervs) |> 
  mutate(period = case_when(
    date %within% s30s ~ "1930s",
    date %within% s50s ~ "1950s",
    date %within% s00s ~ "2000s"), 
    year = year(date),
    month = month(date, label = TRUE, 
                  abbr = TRUE)) |> 
  mutate(yr_id = consecutive_id(year), .by = period) |> 
  mutate(mth_id = row_number(), .by = c(period, year)) |> 
  mutate(seq_id = row_number(), .by = period)
```

## Comparing seasonality


```{r}
bc_int |> 
  print(n = 20)
```

## Comparing seasonality

```{r}
my_labs <- bc_int$seq_id
names(my_labs) <- bc_int$month

ind <- names(my_labs) %in% c("Jan", "May", "Sep")

my_labs <- my_labs[ind]


p_out <- bc_int |> 
  ggplot(aes(x = seq_id, 
             y = season_year, 
             color = period)) +
  geom_line(linewidth = rel(1.2)) +
  scale_x_continuous(breaks = my_labs, 
                     labels = names(my_labs)) + 
  facet_wrap(~ period, ncol = 1) + 
  guides(color = "none") + 
  labs(x = "Month",  y = "Seasonal Component of the Birth Rate", 
       title = "Changing Seasonality in Births: Three Six-Year periods in Three Decades", 
       subtitle = "Seasonal Component from an STL decomposition of 1933-2015 monthly births")
```

---

```{r}
#| fig.width = 15,
#| fig.height = 8.25,
#| echo = FALSE
p_out
```

