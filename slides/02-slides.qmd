---
title: "02 --- Getting Oriented"
format: kjhslides-revealjs
engine: knitr
filters:
  - invert-h1
  - line-highlight
  - include-code-files
author:
  - name: Kieran Healy
date: last-modified
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: "packages"
#| include: FALSE
library(flipbookr)
library(here)
library(tidyverse)
library(kjhslides)
```


```{r}
#| label: "setup"
#| include: FALSE

kjh_register_tenso()
kjh_set_knitr_opts()
kjh_set_slide_theme()







# Safe
```

# Motivation

## Technical computing is often frustrating

![](img/01_stock_sad_mac.png){width=100%}


## What is this?

![](img/01_save_icon.png)

# Two Revolutions in Computing


## What everyday computing is now

:::: {.columns}

::: {.column width="45%"}

![](img/01_stock_phone_and_tablet.png)

:::

::: {.column width="45%" .right}

Touch\-based user interface

Foregrounds a single application

Dislikes multi-tasking

Hides the *file system*

"Laundry Pile" user model of where things are stored

:::

::::



## Where technical computing lives

:::: {.columns}

::: {.column width="35%"}

![](img/01_stock_mac_and_imac.png)

:::

::: {.column width="55%" .right}

Windows and pointers.

Multi-tasking, multiple windows.

Exposes and leverages the *file system*.

Many specialized tools in concert.

Underneath, it's the 1970s, *UNIX*, and the command-line. 

_Cabinets, drawers, and files_ model of where things are stored

:::

::::


## Where technical computing lives

:::: {.columns}

::: {.column width="35%"}

![](img/01_stock_mac_and_imac.png)

:::

::: {.column width="55%" .right}

This toolset is by now really good!

Free! Open! Powerful!

Friendly communities! Lots of information! Many resources!

But: grounded in a UI paradigm that is increasingly far away from the everyday use of computing devices 

So why do we use this stuff?
:::

::::

---

## {background-color="black" background-image="img/01_control.png"}

## "Office" vs "Engineering" approaches

### What is "real" in your project?

### What is the final output?

### How is it produced?

### How are changes managed?


## Different Answers

:::: {.columns}

::: {.column width="45%"}

### Office model

- Formatted documents are real.
- Intermediate outputs are cut and pasted into documents.
- Changes are tracked inside files.
- Final output is often in the same format you've been working in, e.g. a Word file, or a PDF.

:::

::: {.column width="45%" .right}

::::: {.fragment fragment-index=1}

### Engineering model {.right}

- Plain-text files are real.
- Intermediate outputs are produced via code, often inside documents.
- Changes are tracked outside files, at the level of a project.
- Final outputs are assembled programmatically and converted to some desired format.

:::::

:::

::::

## Different strengths and weaknesses

:::: {.columns}

::: {.column width="45%"}

### Office model

Everyone knows Word, Excel, or Google Docs.

"Track changes" is powerful and easy.

Hm, I can't remember how I made this figure

Where did this table of results come from?

`Paper_edits_FINAL_kh-1.docx`

:::

::: {.column width="45%" .right}

::::: {.fragment fragment-index=1}

### Engineering model

Plain text is highly portable.

Push button, recreate analysis.

JFC Why can't I do this simple thing?

`Object of type 'closure' is not subsettable`

:::::

:::

::::

---

:::{.huge .center}
::::{.absolute top="20%"}
Each approach generates solutions to its own problems
::::
:::


# The File System


## The traditional analog {.smaller}


:::: {.columns}

::: {.column width="60%"}

![](img/01_file_cabinet_hierarchy.png){width=90%}


:::

::: {.column width="35%"}

The problem is, you probably have never have actually used one of these!

:::

::::

::: aside

Illustration: @peek02:_unix_power_tools [p. 21]

:::


## The file cabinet!

![](img/01_filing_cabinet.png){width=90%}

::: {.notes}
"The ubiquity of the filing cabinet in the twentieth-century office space, along with its noticeable absence of style, has obscured its transformative role in the histories of both information technology and work. In the first in-depth history of this neglected artifact, Craig Robertson explores how the filing cabinet profoundly shaped the way that information and data have been sorted, stored, retrieved, and used.

Invented in the 1890s, the filing cabinet was a result of the nineteenth-century faith in efficiency. Previously, paper records were arranged haphazardly: bound into books, stacked in piles, curled into slots, or impaled on spindles. The filing cabinet organized loose papers in tabbed folders that could be sorted alphanumerically, radically changing how people accessed, circulated, and structured information.

Robertson’s unconventional history of the origins of the information age posits the filing cabinet as an information storage container, an “automatic memory” machine that contributed to a new type of information labor privileging manual dexterity over mental deliberation. Gendered assumptions about women’s nimble fingers helped to naturalize the changes that brought women into the workforce as low-level clerical workers. The filing cabinet emerges from this unexpected account as a sophisticated piece of information technology and a site of gendered labor that with its folders, files, and tabs continues to shape how we interact with information and data in today’s digital world."

:::

## The file cabinet!

![](img/01_filing_cabinet_manual.png){width=90%}

::: {.notes}
"The ubiquity of the filing cabinet in the twentieth-century office space, along with its noticeable absence of style, has obscured its transformative role in the histories of both information technology and work. In the first in-depth history of this neglected artifact, Craig Robertson explores how the filing cabinet profoundly shaped the way that information and data have been sorted, stored, retrieved, and used.

Invented in the 1890s, the filing cabinet was a result of the nineteenth-century faith in efficiency. Previously, paper records were arranged haphazardly: bound into books, stacked in piles, curled into slots, or impaled on spindles. The filing cabinet organized loose papers in tabbed folders that could be sorted alphanumerically, radically changing how people accessed, circulated, and structured information.

Robertson’s unconventional history of the origins of the information age posits the filing cabinet as an information storage container, an “automatic memory” machine that contributed to a new type of information labor privileging manual dexterity over mental deliberation. Gendered assumptions about women’s nimble fingers helped to naturalize the changes that brought women into the workforce as low-level clerical workers. The filing cabinet emerges from this unexpected account as a sophisticated piece of information technology and a site of gendered labor that with its folders, files, and tabs continues to shape how we interact with information and data in today’s digital world."

:::


## Index cards

![](img/01_library_index-card_shelf.png){width=90%}


## Index cards

![](img/01_library_index_cards.png){width=90%}


## Automating information processing

![](img/01_music_box.png){width=100%}

## Automating information processing

![](img/01_jacquard_loom.png){width=100%}


## Automating information processing

![](img/01_jacquard_loom_card_2.png){width=100%}


## Hollerith machines

![](img/01_hollerith_card.png){width=100%}


::: {.notes}
"At the end of the 1800s Herman Hollerith invented the recording of data on a medium that could then be read by a machine,[dubious – discuss][13][14][15][16] developing punched card data processing technology for the 1890 U.S. census.[17] His tabulating machines read and summarized data stored on punched cards and they began use for government and commercial data processing.
Initially, these electromechanical machines only counted holes, but by the 1920s they had units for carrying out basic arithmetic operations.[18]: 124  Hollerith founded the Tabulating Machine Company (1896) which was one of four companies that were amalgamated via stock acquisition to form a fifth company, Computing-Tabulating-Recording Company (CTR) (1911), later renamed International Business Machines Corporation (IBM) (1924). Other companies entering the punched card business included The Tabulator Limited (Britain, 1902), Deutsche Hollerith-Maschinen Gesellschaft mbH (Dehomag) (Germany, 1911), Powers Accounting Machine Company (US, 1911), Remington Rand (US, 1927), and H.W. Egli Bull (France, 1931).[19] These companies, and others, manufactured and marketed a variety of punched cards and unit record machines for creating, sorting, and tabulating punched cards, even after the development of electronic computers in the 1950s."
:::

## Hollerith Machines

![](img/01_hollerith_tabulator.png){width=100%}


## Hollerith machines

![](img/01_hollerith_card_1890_yellow.png){width=100%}


## Hollerith machines

![](img/01_hollerith_card_1890_decoder_fields.png){width=100%}

::: {.notes}
|               |                              |                                                           |                                     |
|---------------|------------------------------|-----------------------------------------------------------|-------------------------------------|
| Field 1       | Civil War Veterans           | CM, CL, CS: Marine, Sailor, Soldier                       | Confederate Army                    |
|               |                              | UM, UL, US: Marine, Sailor, Soldier                       | United States Army                  |
| Field 2       | Relationship (family)        | Hd: Head of Household                                     | Mb: Member of family                |
|               |                              | Wf: Wife                                                  | O: Other                            |
| Field 3       | Race                         | Jp: Japanese                                              | In: Civilized Indian (taxpaying)    |
|               |                              | Ch: Chinese                                               | Mu: Mulatto                         |
|               |                              | B: Negro                                                  | Qd: Quadroon                        |
|               |                              | W: White                                                  | Oc: Octoroon                        |
| Field 4       | Gender                       | Male or Female                                            |                                     |
| Field 5 & 6   | Your Age                     | Combination of numbers                                    | 0: if under 1 year old              |
|               |                              | Un: Unknown                                               | Mo: \# of months if a baby          |
| Field 7       | Conjugal Condition           | Dv: Divorced                                              | Mr: Married more than 1 year        |
|               |                              | Un: Unknown                                               | CY: Married this year               |
|               |                              | Wd: Widow/Widower                                         | (in the Census Year)                |
|               |                              | Sg: Single                                                |                                     |
| Field 8       | \# of Children born          | Up to 19 children                                         |                                     |
| Field 9       | \# of Children alive         | Up to 19 children                                         |                                     |
| Field 10 & 11 | Your birthplace              | Combination of upper case letters                         | St: birth was in state of residence |
|               |                              | and lower case letters                                    | Un: Unknown                         |
| Field 12      | Mother’s birthplace          | Two Letter Country Codes                                  |                                     |
| Field 13      | Father’s birthplace          | Two Letter Country Codes                                  |                                     |
| Field 14      | \# of years in the US        |                                                           |                                     |
| Field 15      | Citizenship for Foreign-born | Al: Alien                                                 | Pa: First Papers submitted          |
|               |                              | Na: Naturalized citizen                                   | Un: Unknown                         |
| Field 16 & 17 | Occupation                   | Combination of upper case letters  and lower case letters | NG: Not Gainfully employed or       |
|               |                              |                                                           | in School                           |
| Field 18      | Unemployed                   | 1-12: Months unemployed                                   | Oc                                  |
|               |                              |                                                           | O                                   |
| Field 19      | Education                    | OK: Can read and write                                    | ————-OR———–                         |
|               |                              | W: Can read but not write                                 | 1-9: Number of months in school     |
|               |                              | R: : Can write but not read                               | 0: : Not in school                  |
| Field 20      | Language Spoken              | Un: Understand English?                                   | Ft: Father’s language               |
|               |                              | En: English                                               | Mt: Mother’s language               |
|               |                              | Ot: Other                                                 |                                     |
| Field 21      | Tenure                       | Fh: Farm Hired (Rented)                                   | Hh: Home Hired (Rented)             |
|               |                              | FM: Farm Owned (w/ mortgage)                              | Hf: Home owned Free and clear       |
|               |                              | Ff: Farm owned Free and clear                             | Hm: Home Owned (w/ mortgage)        |
|               |                              | X: : Does not apply                                       |                                     |
| Far Left Side | Location                     | State, county, city,: local divisions and                 | Enumerator District                 |
|               |                              |                                                           |                                     |
:::

## Hollerith Operators

![](img/01_hollerith_operator_01.png){width=100%}


## Hollerith Operators

![](img/01_hollerith_operator_02.png){width=100%}


## IBM punch cards

![](img/01_ibm_card.png){width=100%}



## IBM punch cards
![](img/01_ibm_operator.png){width=100%}


## Big Iron

![](img/01_ibm_system_360.png){width=100%}


## Storage

![](img/01_bryant_hard_drive1.png){width=100%}

## Storage

![](img/01_bryant_hard_drive_2.png){width=100%}


## Input/Output

### A late-model teletype (TTY) machine

![](img/01_teletype_telex_machine.png)


## Input/Output

### The DEC VT-100 Terminal

![](img/01_dec_vt100.png)


## Input/Output

![](img/01_macos_terminal_icon.png)


# Back to the file system

## File system hierarchy {.smaller}

![](img/01_file_system_example.png){width="70%"}

::: aside

Illustration: @peek02:_unix_power_tools [p. 23]

:::


## Stepping back

Your computer stores files and does stuff, or "runs commands"

Files are stored in a large hierarchy of folders

The Finder or Window Manager or File Manager is a visual metaphor for representing this hierarchy of files and for running commands on them. But you can also do these things via text-based commands delivered from a prompt, console, or "command line".  

Software like RStudio has a lot of these "old school" computing elements


# [Getting to know]{.fg-yellow} [R and RStudio]{.fg-lblue}


---

:::{.huge}
 We want to [draw graphs]{.fg-orange} [reproducibly]{.fg-green}  
:::

---

:::: {.columns}
::: {.column width="50%"}
![](img/02_r_logo.png)
:::

::: {.column width="50%" .right}
![](img/02_rstudio_logo.png)
:::
::::

## Abstraction in software

:::: {.columns}
::: {.column width="50%"}
### Less

- Easy things are awkward
- Hard things are straightforward
- Really hard things are possible

:::

::: {.column width="50%" .right}

:::
::::

## Abstraction in software

:::: {.columns}
::: {.column width="50%"}
### Less

- Easy things are awkward

- Hard things are straightforward

- Really hard things are possible

:::

::: {.column width="50%"}
### More

- Easy things are trivial

- Hard things are awkward

- Really hard things are impossible

:::
::::

## Compare  

- D3
- Grid
- ggplot
- Stata
- Excel

# The [RStudio]{.fg-lblue} IDE

## An IDE for R {background-image="img/02_ide_control_room.png" background-size="cover"}

## An IDE for Meals {background-image="img/02_ide_kitchen.png" background-size="cover"}

---

![RStudio at startup](img/02_ide_rstudio_startup.png)

---

![RStudio schematic overview](img/02_ide_rstudio_schematic.png)

---

![RStudio schematic overview](img/02_ide_rstudio_schematic_overlay.png)

---

:::{.large .center}
Think in terms of [Data]{.fg-orange} + [Transformations]{.fg-green}, written out as code, rather than a series of point-and-click steps  
:::

---

:::{.large .center}
Our starting [data]{.fg-orange} + our [code]{.fg-green} is what's "real" in our projects, not the final output or any intermediate objects
:::


---


![RStudio at startup](img/02_ide_rstudio_startup.png)

---


![RStudio at startup](img/02_ide_rstudio_sshot_1.png)

---


![RStudio at startup](img/02_ide_rstudio_sshot_2.png)

---


![RStudio at startup](img/02_ide_rstudio_sshot_3.png)

---


![RStudio at startup](img/02_ide_rstudio_sshot_4.png)


# Use [RMarkdown]{.fg-yellow} to [produce]{.fg-orange} and [reproduce]{.fg-green}  work

## Where we want to end up

![PDF out](img/02_lorem_covid_quarto_pdf.png){fig-align="center" width=90%}  

## Where we want to end up

![HTML out](img/02_lorem_covid_quarto_html.png){fig-align="center" width=45%}  

## Where we want to end up

![Word out](img/02_lorem_covid_quarto_word.png){fig-align="center" width=100%}  

## How to get there?

:::: {.columns}
::: {.column width="30%"}
  ![](img/02_covid_r_script.png) 
:::

::: {.column width="70%" .right}
- We could write an **R script** with some notes inside, using it to create some figures and tables, paste them into our document.
- This will work, but we can do better.

:::
::::

## We can [make]{.fg-yellow} this ...

![](img/02_lorem_ipsum_goal.png){fig-align="center" width=100%}  

## ... by [writing]{.fg-green} this

![](img/02_lorem_ipsum_raw.png){fig-align="center" width=100%}  

## The [code]{.fg-pink} gets replaced by its [output]{.fg-green}

:::: {.columns}
::: {.column width="50%"}
![](img/02_lorem_ipsum_raw.png)
:::

::: {.column width="50%" .right}
![](img/02_lorem_ipsum_goal.png)
:::
::::





---

![Markdown document](img/02_lorem_covid_quarto_qmd.png){fig-align="center" width=90%}

---

![Markdown document annotated](img/02_lorem_covid_quarto_qmd_annotated.png){fig-align="center" width=90%}  

---

![](img/02_lorem_covid_quarto_triple.png){fig-align="center" width=140%}  

- This approach has its limitations, but it's _very_ useful and has many benefits.

---

## Basic markdown summary

:::{.custom-small-table}

| Desired style  | Use the following Markdown annotation | 
| -------------- | ------------------------------------- | 
| **Heading 1**  | `# Heading 1`                                    |
| **Heading 2**  | `## Heading 2`                                   |
| Heading 3      | `### Heading 3` (Actual heading styles will vary.) |
| Paragraph      | Just start typing                            |
| **Bold**       | `**Bold**`                                   |
| *Italic*       | `*Italic*`                                   |
| Images         | `[Alternate text for image](path/image.jpg)` |
| [Hyperlinks](https://www.visualizingsociety.com) | `[Link text](https://www.visualizingsociety.com/)` |
| Unordered Lists      |   |
| - First    | `- First` |
| - Second.  |  `- Second` |
| - Third    |`- Third`   |
| Ordered Lists      |   |
| 1. First    | `1. First` |
| 2. Second.  |  `2. Second` |
| 3. Third    |`3. Third`   |
| Footnote.¹ |  `Footnote[^notelabel]`  |
|  ¹The note's content. | `[^notelabel] The note's content.`  |

:::


## The right frame of mind

- This is like learning how to drive a car, or how to cook in a kitchen ... or learning to speak a language.
- After some orientation to what's where, you will learn best by _doing_.
- Software is a pain, but you won't crash the car or burn your house down. 

---

:::{.huge}
TYPE OUT<br />YOUR CODE<br />[BY HAND]{.fg-orange}
:::

---

![Samuel Beckett](img/02_beckett_fail_better.png){fig-align="center" width=90%}

---

:::{.huge}
 GETTING O[R]{.fg-lblue}IENTED 
:::

## Loading the tidyverse libraries

```{r}
#| label: "02-about-r-1"
#| message: TRUE
library(tidyverse)
```

- The tidyverse has several components. 
- We'll return to this message about Conflicts later.
- Again, the code and messages you see here is actual R output, produced at the same time as the slide.

## Tidyverse components

:::: {.columns}
::: {.column width="55%"}
  - [**`library`**]{.fg-green}`(tidyverse)`
- `Loading tidyverse: ggplot2`
- `Loading tidyverse: tibble`
- `Loading tidyverse: tidyr`
- `Loading tidyverse: readr`
- `Loading tidyverse: purrr`
- `Loading tidyverse: dplyr`
:::

::: {.column width="45%" .left}
  - Call the package and ...
- `<|` **Draw graphs**
- `<|` **Nicer data tables**
- `<|` **Tidy your data**
- `<|` **Get data into R**
- `<|` **Fancy Iteration**
- `<|` **Action verbs for tables**
:::
::::


# What R looks like

## Code you can type and run:


```{r }
#| label: "02-about-r-3"
## Inside code chunks, lines beginning with a # character are comments
## Comments are ignored by R

my_numbers <- c(1, 1, 2, 4, 1, 3, 1, 5) # Anything after a # character is ignored as well

```


Output:

```{r }
#| label: "02-about-r-4"
my_numbers 
```

This is equivalent to running the code above, typing `my_numbers` at the console, and hitting enter.

## What R looks like

By convention, code output in documents is prefixed by `##`


Also by convention, outputting vectors, etc, gets a counter keeping track of the number of elements. For example,


```{r }
#| label: "02-about-r-6"
letters
```

# Some things to know about [R]{.fg-green}

## 0. [It's a calculator]{.fg-yellow}

:::: {.columns}
::: {.column width="50%"}
  - Arithmetic

```{r }
#| label: "02-about-r-7"
(31 * 12) / 2^4
```

```{r }
#| label: "02-about-r-8"
sqrt(25)
```

```{r }
#| label: "02-about-r-9"
log(100)

log10(100)

```

:::

::: {.column width="50%" .right}

:::
::::



## 0. [It's a calculator]{.fg-yellow}

:::: {.columns}
::: {.column width="50%"}
  - Arithmetic

```{r }
#| label: "02-about-r-7a"
(31 * 12) / 2^4
```

```{r }
#| label: "02-about-r-8a"
sqrt(25)
```

```{r }
#| label: "02-about-r-9a"
log(100)

log10(100)

```

:::

::: {.column width="50%" .right}
 - Logic

```{r }
#| label: "02-about-r-10"
4 < 10
4 > 2 & 1 > 0.5 # The "&" means "and"
4 < 2 | 1 > 0.5 # The "|" means "or"
4 < 2 | 1 < 0.5
```

:::
::::


## Boolean and Logical operators

Logical equality and inequality (yielding a [`TRUE`]{.fg-green} or [`FALSE`]{.fg-red} result) is done with `==` and `!=`. Other logical operators include `<`, `>`, `<=`, `>=`, and `!` for negation.


```{r }
#| label: "02-about-r-11"
## A logical test
2 == 2 # Write `=` twice
```

```{r}
#| label: "02-about-r-12"
#| eval: FALSE
## This will cause an error, because R will think you are trying to assign a value
2 = 2

## Error in 2 = 2 : invalid (do_set) left-hand side to assignment
```

```{r }
#| label: "02-about-r-13"
3 != 7 # Write `!` and then `=` to make `!=`
```

## 1. [Everything in R has a name]{.fg-yellow}


```{r }
#| label: "02-about-r-21"
my_numbers # We created this a few minutes ago

letters  # This one is built-in

pi  # Also built-in
```

## Some names are forbidden

Or it's a _really_ bad idea to try to use them 


```{r}
#| label: "02-about-r-22"
#| eval: FALSE
TRUE
FALSE
Inf
NaN 
NA 
NULL

for
if
while
break
function
```

## 2. [Everything is an object]{.fg-yellow}

There are a few built-in objects:


```{r }
#| label: "02-about-r-23"
letters
```

```{r }
#| label: "02-about-r-24"
pi
```

```{r }
#| label: "02-about-r-25"

LETTERS
```

## 3. [You can create objects]{.fg-yellow} 

In fact, this is mostly what we will be doing.

Objects are created by [assigning]{.fg-red} a thing to a name:


```{r }
#| label: "02-about-r-26"
## name... gets ... this stuff
my_numbers <- c(1, 2, 3, 1, 3, 5, 25, 10)

## name ... gets ... the output of the function `c()`
your_numbers <- c(5, 31, 71, 1, 3, 21, 6, 52)
```

The [**`c()`**]{.fg-green} function _combines_ or _concatenates_ things

::: {.notes}
The core thing we do in R is _create objects_ by _assigning a thing to a name_. That thing is usually the output of some _function_. There are a lot of built-in functions.

We can create an object with the `c()` function and the *assignment operator*, `<-`. The `c()` function concatenates things together.
:::

## The assignment operator

- The assignment operator performs the action of creating objects
- Use a keyboard shortcut to write it:
- Press `option` _and_ `-` on a Mac
- Press `alt` _and_ `-` on Windows


## Assignment with [**`=`**]{.fg-green}

- You can use [**`=`**]{.fg-pink} as well as [**`<-`**]{.fg-pink} for assignment.


```{r }
#| label: "02-about-r-27"
my_numbers = c(1, 2, 3, 1, 3, 5, 25)

my_numbers
```

- On the other hand, [**`=`**]{.fg-pink} has a different meaning when used in functions.
- I'm going to use [**`<-`**]{.fg-pink} for assignment throughout. 
- Be consistent either way.


## 4. [You do things with functions]{.fg-yellow}


```{r }
#| label: "02-about-r-28"

## this object... gets ... the output of this function
my_numbers <- c(1, 2, 3, 1, 3, 5, 25, 10)

your_numbers <- c(5, 31, 71, 1, 3, 21, 6, 52)
```

```{r }
#| label: "02-about-r-29"
my_numbers
```

## 4. [You do things with functions]{.fg-yellow}

- Functions can be identified by the parentheses after their names.

```{r }
#| label: "02-about-r-30"
my_numbers 
```



```{r}
#| label: "02-about-r-31"
#| eval: FALSE
## If you run this you'll get an error
mean()
```


## What functions usually do

- They take [**inputs**]{.fg-pink} to [**arguments**]{.fg-orange}
- They perform [**actions**]{.fg-red}
- They produce, or return, [**outputs**]{.fg-green}


### mean[(]{.fg-red}[x]{.fg-orange} `=` [my_numbers]{.fg-pink}[)]{.fg-red}

## What functions usually do

- They take [**inputs**]{.fg-pink} to [**arguments**]{.fg-orange}
- They perform [**actions**]{.fg-red}
- They produce, or return, [**outputs**]{.fg-green}


### mean[(]{.fg-red}[x]{.fg-orange} `=` [my_numbers]{.fg-pink}[)]{.fg-red}

### [1] [6.25]{.fg-green}

## What functions usually do

```{r }
#| label: "02-about-r-32"
## Get the mean of what? Of x.
## You need to tell the function what x is
mean(x = my_numbers)

mean(x = your_numbers)
```

## What functions usually do

If you don't _name_ the arguments, R assumes you are providing them in the order the function expects.


```{r }
#| label: "02-about-r-33"
mean(your_numbers)
```



## What functions usually do

What arguments? Which order? Read the function's help page

```{r}
#| label: "02-about-r-34"
#| eval: FALSE
help(mean)
```

```{r}
#| label: "02-about-r-35"
#| eval: FALSE
## quicker
?mean
```


- How to read an R help page? 

## What functions usually do

- Arguments often tell the function what to do in specific circumstances

```{r }
#| label: "02-about-r-36"
missing_numbers <- c(1:10, NA, 20, 32, 50, 104, 32, 147, 99, NA, 45)

mean(missing_numbers)

mean(missing_numbers, na.rm = TRUE)
```

Or select from one of several options


```{r }
#| label: "02-about-r-37"
## Look at ?mean to see what `trim` does
mean(missing_numbers, na.rm = TRUE, trim = 0.1)
```

## What functions usually do


There are all kinds of functions. They return different things.

```{r }
#| label: "02-about-r-38"
summary(my_numbers)
```

## What functions usually do

You can assign the output of a function to a name, which turns it into an object. (Otherwise it'll send its output to the console.)


```{r }
#| label: "02-about-r-39"
my_summary <- summary(my_numbers)

my_summary
```



## What functions usually do

Objects hang around in your work environment until they are overwritten by you, or are deleted.

```{r}
#| label: "02-about-r-40"
#| eval: FALSE
## rm() function removes objects
rm(my_summary)

my_summary

## Error: object 'my_summary' not found
```

## Functions can be [nested]{.fg-yellow}


```{r }
#| label: "02-about-r-41"
c(1:20)
```

```{r }
#| label: "02-about-r-42"
mean(c(1:20))
```

```{r }
#| label: "02-about-r-43"
summary(mean(c(1:20)))
```

```{r }
#| label: "02-about-r-44"
names(summary(mean(c(1:20))))
```

```{r }
#| label: "02-about-r-45"
length(names(summary(mean(c(1:20)))))
```

Nested functions are evaluated from the inside out.


## Use the pipe operator: [|>]{.fg-green}

Instead of deeply nesting functions in parentheses, we can use the _pipe operator_:

```{r }
#| label: "02-about-r-46"
c(1:20) |> mean() |> summary() |> names() |>  length()
```

Read this operator as "_[**and then**]{.fg-green}_"

## Use the pipe operator: [|>]{.fg-green}


Better, vertical space is free in R:


```{r }
#| label: "02-about-r-47"
c(1:20) |> 
  mean() |> 
  summary() |> 
  names() |> 
  length()
```

## Pipelines make code more [readable]{.fg-green}

Not great, Bob:

:::{.smallcode}

```{.r}
  serve(stir(pour_in_pan(whisk(crack_eggs(get_from_fridge(eggs), into = "bowl"), len = 40), temp = "med-high")))
```
:::

Notice how the first thing you read is the last operation performed.

## Pipelines make code more [readable]{.fg-green}

We can use vertical space and indents, but it's really not much better:

```{.r}
serve(
  stir(
    pour_in_pan(
      whisk(
        crack_eggs(
          get_from_fridge(eggs), 
        into = "bowl"), 
      len = 40), 
    temp = "med-high")
  )
)
```


## Pipelines make code more [readable]{.fg-green}

Much nicer:


```r
eggs |> 
  get_from_fridge() |> 
  crack_eggs(into = "bowl") |> 
  whisk(len = 40) |> 
  pour_in_pan(temp = "med-high") |> 
  stir() |> 
  serve()

```

- We'll still use nested parentheses quite a bit, often in the context of a function working inside a pipeline. But it's good not to have too many levels of nesting.


## The other pipe: [`%>%`]{.fg-green}

The Base R pipe operator, [**`|>`**]{.fg-green} is a relatively recent addition to R. 

Piping operations were originally introduced in a package called called `magrittr`, where it took the form [**`%>%`**]{.fg-green}

## The other pipe: [`%>%`]{.fg-green}

The Base R pipe operator, [**`|>`**]{.fg-green} is a relatively recent addition to R. 

Piping operations were originally introduced in a package called called `magrittr`, where it took the form [**`%>%`**]{.fg-green}

It's been so successful, a version of it has been incorporated into Base R. For our puposes, they're the same.

## Functions are bundled into [packages]{.fg-yellow}

Packages are loaded into your working environment using the `library()` function:

```{r }
#| label: "02-about-r-48"
## A package containing a dataset rather than functions
library(gapminder)

gapminder
```

## Functions are bundled into [packages]{.fg-yellow}

You need only _install_ a package once (and occasionally update it):

```{r}
#| label: "02-about-r-49"
#| eval: FALSE
## Do at least once for each package. Once done, not needed each time.
install.packages("palmerpenguins", repos = "http://cran.rstudio.com")

## Needed sometimes, especially after an R major version upgrade.
update.packages(repos = "http://cran.rstudio.com")

```

## Functions are bundled into [packages]{.fg-yellow}

But you must _load_ the package in each R session before you can access its contents:

```{r }
#| label: "02-about-r-50"
## To load a package, usually at the start of your RMarkdown document or script file
library(palmerpenguins)
penguins
```


# [Let's Go!]{.fg-lblue}

## Like before

```{r}
#| label: "codefig-plot-2"
#| message: FALSE
#| fig.width: 5.8
#| fig.height: 5.5
#| output-location: column
library(tidyverse)
library(gapminder)

p <- ggplot(data = gapminder, 
            mapping = aes(x = gdpPercap, 
                          y = lifeExp)) 

p + geom_point()
```

## What we did

```{r}
#| label: "02-about-r-68"
#| message: FALSE
#| eval: FALSE
#| echo: TRUE
library(tidyverse)

library(gapminder)
```

Load the packages we need: `tidyverse` and `gapminder`

## What we did

```{r}
#| label: "02-about-r-69"
#| message: FALSE
#| eval: FALSE
#| echo: TRUE

p <- ggplot(data = gapminder, 
            mapping = aes(x = gdpPercap, 
                          y = lifeExp)) 
```


New object named [**`p`**]{.fg-lblue} [`gets`]{.fg-pink} the output of the [`ggplot()` _function_]{.fg-green}, given these [_arguments_]{.fg-orange}


Notice how one of the arguments, [`mapping`]{.fg-orange}, is itself taking the output of a function named [`aes()`]{.fg-green}

## What we did

```{r}
#| label: "02-about-r-70-2"
#| message: FALSE
#| eval: FALSE
#| echo: TRUE


p + geom_point()

```

Show me the output of the [**`p`**]{.fg-lblue} object and the [`geom_point()`]{.fg-green} function.


The [`+`]{.fg-pink} here acts just like the [`|>`]{.fg-pink} pipe, but for ggplot functions only. (This is an accident of history.)


## And what is R doing?

R objects are just lists of [stuff to use]{.fg-orange} or [things to do]{.fg-green}

## Objects are like Bento Boxes {background-image="img/02_r_object_bento_box.png" background-size="cover"}

---

![The `p` object](img/02_r_objects_p_bleep.png)



---

![Peek in with the object inspector](img/02_r_object_inspector_panel.png)


---

![Peek in with the object inspector](img/02_r_ide_object_inspector.png)

## Core concepts: mappings + geoms

The core idea, which we'll focus on more formally next week, is that we have *data*, arranged in columns, that we want to represent visually on some sort of plot. 

That means we need a _mapping_ --- a link, a connection, a representation --- between things in our table and stuff we can draw. That is what the *mapping* argument is for. 

And we need a _geom_ --- a kind of plot, a particular sort of graph --- that we draw with that. 

## Practical examples

Let's try some live examples ...How might we improve or extend this graph based on the data we have? Or how might we look at it differently?


```{r}
```{r}
#| label: "02-about-r-70-3"
#| message: FALSE
#| eval: TRUE
#| echo: TRUE


p + geom_point()

```
```



